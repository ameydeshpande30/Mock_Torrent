An application program interface (API) is a set of routines, protocols, and tools for building software applications.
Basically, an API specifies how software components should interact. 
Additionally, APIs are used when programming graphical user interface (GUI) components.
A good API makes it easier to develop a program by providing all the building blocks.
A programmer then puts the blocks together.
Google Maps API: Google Maps APIs lets developers embed Google Maps on webpages using a JavaScript or Flash interface. The Google Maps API is designed to work on mobile devices and desktop browsers.
YouTube APIs: YouTube API: Google's APIs lets developers integrate YouTube videos and functionality into websites or applications. YouTube APIs include the YouTube Analytics API, YouTube Data API, YouTube Live Streaming API, YouTube Player APIs and others.
Flickr API: The Flickr API is used by developers to access the Flick photo sharing community data. The Flickr API consists of a set of callable methods, and some API endpoints.
Twitter APIs: Twitter offers two APIs. The REST API allows developers to access core Twitter data and the Search API provides methods for developers to interact with Twitter Search and trends data.
Amazon Product Advertising API: Amazon's Product Advertising API gives developers access to Amazon's product selection and discovery functionality to advertise Amazon products to monetize a website.
When you use an application on your mobile phone, the application connects to the Internet and sends data to a server. 
The server then retrieves that data, interprets it, performs the necessary actions and sends it back to your phone. 
The application then interprets that data and presents you with the information you wanted in a readable way. 
This is what an API is - all of this happens via API.
Each time you use an app like Facebook, send an instant message, or check the weather on your phone, you’re using an API.
Imagine you’re sitting at a table in a restaurant with a menu of choices to order from.
The kitchen is the part of the “system” that will prepare your order. 
What is missing is the critical link to communicate your order to the kitchen and deliver your food back to your table. 
That’s where the waiter or API comes in. The waiter is the messenger – or API – that takes your request or order and tells the kitchen – the system – what to do. 
Then the waiter delivers the response back to you; in this case, it is the food.
API has taken on some characteristics that make them extraordinarily valuable and useful:
Modern APIs adhere to standards (typically HTTP and REST), that are developer-friendly, easily accessible and understood broadly
They are treated more like products than code. They are designed for consumption for specific audiences (e.g., mobile developers), they are documented, and they are versioned in a way that users can have certain expectations of its maintenance and lifecycle.
Because they are much more standardized, they have a much stronger discipline for security and governance, as well as monitored and managed for performance and scale
As any other piece of productized software, the modern API has its own software development lifecycle (SDLC) of designing, testing, building, managing, and versioning. 
